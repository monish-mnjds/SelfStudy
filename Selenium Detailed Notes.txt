Xpath
-----

xpath is also known as xml path, it is for finding the element in the webpage

xpath is the path of the web element in the dom/html.

in order to handle the dynamic elements we use xpath.

in order to traverse in the reverse order we use xpath.

indexing is allowed and it starts from 1.


absolute xpath is lengthy so we go for relative xpath.

we can use more than one attribute value in xpath

eg: //input[@name = 'username'][@class = 'textField']


we can use 'and' operation

if both the attributes are present it will find the web element 
otherwise it will raises NoSuchElementException.

eg: //input[@name='username' and @class='textField']

in the place 'and' we can even use 'or' operator and also 'not' operator.


xpath by text function:
-----------------------

we need to give leading and trailing spaces in the text(), if it is in visible text.

//tagname[text()='visible text']


xpath by normalize-space:
-------------------------

it is used to remove leading spaces and trailing spaces from the string.

//label[normalize-space(text())='keep me logged in']

//input[normalize-space(@name)='username']


xpath by contains:
------------------

//htmltag[contains(source, 'value')]

//label[contains(text(),'keep me logged in')]

/input[contains(@id, 'username')]


xpath by starts-with:
---------------------

//htmltag[starts-with(source, 'value')]

//label[starts-with(text(),'keep me logged in')]

/input[starts-with(@id, 'username')]


xpath by grouping:
------------------

(//xpathExpression)[index]

//div[@id='fruit']/button[1]  # this will match all the first element

(//div[@id='fruit']/button)[1]  # this will match only the first element


xpath last():
-------------

(//xpathExpression)[last()]

#this gives the last element

-------------------------------------------------------------------------------------------

synchronization
---------------

the process of matching selenium speed with application is synchronization.

unconditional synchronization
-----------------------------

time.sleep(5)   #it will wait for certain time before proceeding....

it will wait for particular seconds eventhought the element is displayed....


in selenium, in some cases it will throw NoSuchElementException eventhough the specified locator is correct.
to handle this we use synchronization methods.

implicit wait
-------------

implicitlty_wait method will wait for certain amount of time before throwing exception

default value is 0.   

polling period:
---------------
implicitly_wait will search the web element in the dom for every 500 milliseconds before the time gets over.

after the time gets over it will throw no such element exception.      


we can specify implicitly_wait multiple time but it is not recommended and not necessary.....

implicitly_wait is only for find_element and find_elements......

-----------------------------------------------------------------------------------------------------------------

explicit wait
-------------

unlike implicit wait, explicit waits are applied for a particular instance only....not every instance

WebDriverWait and Expected Conditions are the classes to enforce the explicit wait.


WebDriverWait class takes two arguments....         #WebDriverWait(driver, 30)

first argument is the object of the WebDriver.    #driver = webdriver.Chrome()

second argument is the timeout...


until method takes one argument called condition methods.

to pass the condition we use the expected condition class.

when the condition is true it goes for the next line

when the condition is false, it will throw timeout exception, 
if the time is not over, for every 500 milliseconds it searches for the web element...
once the time gets over it raises TimeOut Exception........


implicit wait      vs       explicit wait
-----------------------------------------

1)  waiting condition is built-in                                   1) we should mention the waiting conditon 

2)  we can handle synchronization of find element
and find elements                                                   2)  can handle any method but one at a time

3) if time is over we get 
NoSuchElementException                                              3) if time is over we get TimeOutException


web element commands
--------------------
send_keys()
click()
clear()
find_element
find_elements
is_displayed()
is_enabled()
is_selected()    
get_attribute
get_property
tag_name            #returns the tag name
submit()
text
location            #returns x and y coordinates of a web element.....{'x':34,'y':35}            # get('x') gives the x coordinates value.....
size                #returns height and width of a web element........{'height':17, 'width':35}  # get{'height') gives the height of the web element.....
rect
value_of_css_property

clear() is used to clear the text present in the text boxes.

submit() is used to click on the button which is present in <form> tags...

rect works only for mozilla and returns both the size and location in a dictionary format....#{'x':12, 'y':23, 'height':10, 'width':21}

value_of_css_property('color')   #returns the css property value  like rgba(0, 0, 238, 1)

-----------------------------------------------------------------------------------------------------------------------------------------------------

find element     vs       find elements

1) return type is web element                               1) return type is list of web elements

2) if the specified locator is matching with
multiple elements, it returns first matching element        2) it returns all the matching elements.

3)  if not matching with any element it will
throw NoSuchElementException.                               3) it will not throw any error instead it returns the empty list.

--------------------------------------------------------------------------------------------------------------------------------

Keys
-----

keys is a class to perform keyboard actions

the keys will be used an argument for send_keys method.

------------------------------------------------------------------------

Select()
--------

select.select_by_visible_text()
select.select_by_value()
select.select_by_index()
select.deselect_by_visible_text()
select.deselect_by_value()
select.deselect_by_index()
select.deselect_all()
select.all_selected_options
select.first_selected_option
select.is_multiple
select.options

we can use the select class to perform the operation on the drop downs, if it is only developed 
using the 'select' tag.

the dropdown built without using select class are called customized drop downs.

we can handle them using web element command only.........find element and find_elements......

----------------------------------------------------------------------------------------------------

Action Chains
-------------

Action Chains are a way to automate low level interactions such as mouse movements, mouse button actions,
key press and context menu....

we need to create an object for actionchains, which takes one argument called webdriver.

#actionchains(driver) to pass the control from driver to actionchains.

perform() to generate the actions on the browser.

move_to_element().perform()
move_to_element().click().perform()    #composite actions is performing multiple actions at the same time.
pause(seconds)
context_click().perform()              #right click on the element

we cannot inspect the context menu so we need keyboard module

we need to install it using pip and import the keyboard 

keyboard.press("t")  #open the link in new tab
keyboard.press("w")  #open the link in new window

send_keys(Keys.CONTROL + Keys.ENTER).perform()      # to send sequence of keystrokes

click_and_hold(element).release(element).perform()

double_click(element).perform()

drag_and_drop(sourceElement, targetElement).perform()

------------------------------------------------------------------------------------------------------------------

HTML pop ups 
------------

popups built using html is html popups...

we can inspect it.

we should not use switch_to , it is part of the web page , so we need to use only find_element only....

child-browser popup:
---------------------

we can inspect it and move it....

driver.switch_to.window("window_name")

driver.current_window_handle    #returns current window name in a string

driver.window_handles           #returns list of window handles

alert-popups:
--------------
we cannot inspect but we can move it....

from window we need to pass the control to alert

alert.accept()
alert.dismiss()
alert.send_keys()
alert.text

switch_to.alert     #is used to switch control from window to alert popup

notification popups
----------------------

we cannot inspect it and we cannot move it.

we can handle these popups using profile in firefox and option in chrome.....

profile = webdriver.FirefoxProfile()
profile.set_preference("dom.webnotifications.enabled", False)

driver = webdriver.Firefox(profile)


option = webdriver.ChromeOptions()
option.add_argument("--disable-notifications")

driver = webdriver.Chrome('c:/selenium_driver/chromedriver.exe', chrome_options = option)

--------------------------------------------------------------------------------------------------

screenshots
-----------
we take screenshots for mainly to see the flow of the test steps...

it will be helpful when test fails, to find what went wrong in the scripts....

screenshots can be saved only in .png format.

save_screenshot('filename')
get_screenshot_as_file('filename')
these two methods take and save the screenshots in .png formats

get_screenshot_as_png()
this returns a binary data and create an image in memory..
it can be useful if we want to manipulate before saving it....

to take screenshot of one single element, selenium has no direct method....

after saving we need to open it and then crop is the only way.......

-------------------------------------------------------------------

here we are using PIL module and importing Image class.... (pillow module)

from PIL import Image

location = element.location
size = element.size

driver.save_screenshot("image.png")

x = location['x']
y = location['y']
width = location['x'] + size['width']
height = location['y'] + size['height']

im = Image.open('image.png')
im = im.crop((int(x), int(y), int(width), int(height)))
im.save('cropped_image.png')

------------------------------------------------------------------------

how to take screenshot of alert popups ?
----------------------------------------

import pyautogui

pyautogui.screenshot().save('screenshot.png')

------------------------------------------------------------------------

what is POM?

page object model is an object design pattern in python...

use of pom?

using POM we can develop and test web pages.
it is used to handle the staleElementReferenceException.
code reusability, readability, maintainability.....

why POM?

   A better approach to script maintenance, it is used to create a separate class file 
which would find elements, fill them or verify them.  This class can be reused in all the scripts 
using that element.  

  In future, if there is a change in the web element, we need to make the change in just 1 class file 
and 10 different scripts.

--------------------------------------------------------------------------------------------------------

pytest
-------
it is a unittesting framework which allows us to write simple and scalable test codes using python..

unittesting is isolating a section of the code and testing its correctness.

it is usually performed by developers...


use of pytest:
--------------

we can generate the reports.....

we can execute all the tests classes.....

re-execute the failed test classes after debugging....

we can use it for unit, functional, integration and end to end testing...

advantages:
------------

can run tests in parallel

can run a specific test 

automatically detect tests

skip tests.

dependency test, ordering test and grouping test

provides baseline for test functions, classes, modules and sessions.

generate the reports....

-----------------------------------------------

verbose                    pytest -v
--------
it is for producing the logging output...

pytest allows the user to control the verbose(logging) information.

to stop at the first failed test case  --------->  pytest -x

to stop after 'n' times -------------> pytest --maxfail = 2

to run the failed tests only ---------> pytest --last-failed

to run the failed first and successful at last --------> pytest --failed-first

to run the new test first then rest of the test ---------> pytest --new-first

generating html reports
------------------------

install pytest-html plugins

pytest --html = path

-----------------------------------------

Markers
-------

marker are used to mark the test method and to run the markered test cases only....

there are 2 types of markers..
1) built - in markers      2) custom markers

markers which are provided by pytest are called built-in markers.

@pytest.mark.usefixtures('name')
@pytest.mark.parameterize(arg_names, arg_values)
@pytest.mark.skip(reason = '')
@pytest.mark.skipif(condition, reason = '')           #if condition is true, it skips the test....
                                                      #if false, runs the test...
                                                      
to skip the methods of a class
decorate it above the class.....

to skip every test cases decorate it below the last import statement...

@pytest.mark.parameterize(arg_names, arg_values)
----------------------------------------------------

for only one arg name ------> @parameterize('arg1, [1,2,3])

for multiple arg name ------> @parameterize('arg1, arg2',[(1, 2), (3, 4), (5, 6)]

custom markers
--------------

pytest -m 'marker_name'

pytest -m 'smoke and regression'

pytest -m 'smoke or regression'

pytest -v -m 'not smoke'

we always need to register the custom markers before decorating them....

to register we need to click on project -> new -> file -> pytest.ini 

[pytest]
markers =
   smoke : marks tests as smoke
   regression : marks tests as regression
   
 
to make every one to use the same markers we need to 
give              ---> addopts = --strict

----------------------------------------------------------------------------

fixtures
---------

The purpose of test fixtures is to provide a fixed baseline upon which 
tests can reliably and repeatedly execute.

Why do you want fixtures?
-------------------------
If your tests need to work on data, you typically need to set them up. 
This is often a process that has to be repeated and independent for each test. 
This often leads to duplicate code.

@pytest.fixture(scope='function', params=None, autouse=False)

default scope is function....

scope – the scope for which this fixture is shared, one of “function” (default),
“class”, “module”, “session”.

params – an optional list of parameters which will cause multiple invocations of the 
fixture function and all of the tests using it.

autouse – if True, the fixture function is activated for all tests that can see it. 
If False (the default) then an explicit reference is needed to activate the fixture.

Fixture can be used in 3 different ways, 

1. By passing fixture directly to test functions. 
2. By calling a fixture using the use_fixture marker. 
3. By using the “autouse”.

using add finaliser
-------------------
import pytest 

@pytest.fixture(autouse = True)
def setup(request):
     print('running before the test')
     def teardown():
         print('running after the test')
     request.addfinaliser(teardown)
     
finalizer will always be called regardless if the fixture setup code raises an exception.

using yield
-----------
@pytest.fixture(autouse = True)
def setup():
     print('running before the test')
     yield 
     print('running after the test')
     
conftest.py
------------

You can add fixtures to a predefined file called conftest.py. 
Fixtures in this file will be automatically discovered upon running pytest, no import needed.

Note: All the common fixtures have to be developed in the conftest.py file
-----

parameterizing fixtures:
------------------------

The fixture function gets access to each parameter through the special request object:
   
import pytest

@pytest.fixture(scope = 'function', params = ["Chrome", "Firefox"], autouse = True)
def function_setup(request):
    print("\n launching "+request.param +" browser")
    yield
    print("\n launching "+request.param +" browser")
    
The main change is the declaration of params with @pytest.fixture, a list of values for each of which the 
fixture function will execute and can access a value via “request.param”. No test function code needs to change.

every test method will run in chrome first and then firefox, chrome first, then firefox...and so on....

------------------------------------------------------------------------------------------------------------------

What is Assertion?
------------------

Assertions are statements that assert or state a fact confidently in your program.

For example, while writing a division function, you're confident the divisor shouldn't be zero, 
you assert divisor is not equal to zero.

Assertions are simply Boolean expressions that checks if the conditions return true or not. 
If it is true, the program does nothing and move to the next line of code. 
However, if it's false, the program stops and throws an error.

It is also a debugging tool as it brings the program on halt as soon as any error is occurred 
and shows on which point of the program error has occurred.

Syntax for using Assert in Python: 
----------------------------------

assert <condition> 
assert <condition>, <error message>

Why Assertion?
--------------

Programming with assertion is a great idea ...

because they provide run-time checks of expected results.

When you are debugging code filled with assert statements, 
failures appear earlier and closer to the locations of the errors,
which make them easier to diagnose and fix.

assert statements serve as test code integrated directly into your implementation.

----------------------------------------------------------------------------------------------

Framework
----------

It is a standard set of rules, guidelines and best practices followed to efficiently write scripts for automation....

- Framework is a way to organize your complex code logics in more meaningful way to make our life easier.
- Frameworks help to structure our code and make maintenance easy.

Utilizing a framework for automated testing will increase a team’s test speed and efficiency, improve test accuracy.

DATA-DRIVEN FRAMEWORK 
---------------------

Using a data-driven framework separates the test data from script logic, meaning testers can store data externally. 
Very frequently, testers find themselves in a situation where they need to test the same feature or function of an 
application multiple times with different sets of data.

HYBRID FRAMEWORK
----------------

The Hybrid framework is built with a number of reusable modules / function libraries that are developed 
with the following features in mind:

Maintainability – Hybrid framework significantly reduces maintenance effort.
Re-usability – It allows to reuse test cases and library functions.
Manageability - effective test design, execution, and traceability.
Accessibility – easy to design, develop, modify and debug test cases while executing.
Availability – Allows to schedule automation execution.
Reliability – due to advanced error handling and scenario recovery.
Flexibility – framework independent of system or environment under test.
Measurability – customizable reporting of test results ensures the quality output.

-------------------------------------------------------------------------------------------------------------------------

xlrd
-----

import xlrd

wb = xlrd.open_workbook('sample.xlsx')

ws = wb.sheet_by_name('Covid')    # Read all the rows from sheet Covid

rows = ws.get_rows()

print(rows)

<generator object Sheet.get_rows.<locals>.<genexpr> at 0x7fd612c29660>

# Each row in the excel sheet is being represented as a python list.
# Each item of the list is of type "Cell"

for row in rows:
    print(row)

[text:'Country', text:'Date', text:'Cases', text:'Per_Million']
[text:'India', xldate:43947.0, number:26496.0, number:19.2]

for row in rows:
    print(row[0].value, row[1].value, row[2].value)

Country Cases Per_Million
India 26496.0 19.2

-------------------------------
common exception
----------------

TimeoutException
----------------

Usually thrown by until method of WebDriverWait class.
Possible cause would be when the command does not complete with in specified timeout period.

NoSuchFrameException
--------------------

Thrown when frame target to be switched doesn't exist.

NoAlertPresentException
-----------------------

Thrown when switching to no presented alert.
This can be caused by calling an operation on the Alert() class when an alert is not yet on the screen.

NoSuchElementException
----------------------

This exception is raised when the element is not found in DOM.
The exception is raised by find_element method.
You may need to check the selector that you are using in find_element method to rectify the issue.

StaleElementReferenceException
------------------------------

Thrown when a reference to an element is now "stale" or Lost.
The possible cause for this exception is that you are no longer on the same page, or the page may have refreshed since the element was located.
The element may have been removed and re-added to the web page, since it was located.
Element may have been inside an iframe or another context which was refreshed.

---------------------------------------------------------------------------------------------------------

iframes
-------

iFrame HTML tag will be used to insert one html page in another html page.

iFrame HTML element is used to insert content from another source, such as an advertisement, into a Web page.

if an element is inside the frame then web driver cannot find the element.

In order to work with frame web elements, we should pass driver control to the frame before performing an action.

There are three ways we can pass driver control to frame.

Int
String (ID/Name)
Web Element (Address)

driver.switch_to.frame(1)
driver.switch_to.frame('frame_name')
driver.switch_to.frame(driver.find_element_by_xpath("//iframe[@name='frame1']"))

driver.switch_to.default_content()
driver.switch_to.parent_frame()

Default content method is used to switch to main page directly.
Parent frame method is used to switch to its immediate parent page.

index of Frame starts from 0

Whenever switchTo ().Frame () method fails to locate the frame in a HTML page. We get a NoSuchFrameException.
Whenever the frame page get refresh, control will automatically go back to the main page.

------------------------------------------------------------------------------------------------------------------

allure report
-------------

pytest --alluredir = 'path'

pytest --junitxml = 'path'       ---> xml report

pytest --html = 'path'           ---> html report

-------------------------------------------------------------------------------------------------------------------
